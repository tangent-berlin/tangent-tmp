{
  "published": true,
  "title": "@upstash/ratelimit",
  "description": "Ratelimiting library for serverless and edge runtimes. Built on top of Upstash Redis.",
  "date": "2022-06-06T00:00:00.000Z",
  "url": "https://upstash.com/blog/upstash-ratelimit",
  "repository": "upstash/ratelimit",
  "body": {
    "raw": "\r\nIn today's digital age, serverless computing has become increasingly popular due to its scalability and cost-efficiency. One of the challenges of serverless computing is to manage resources efficiently, and one critical aspect of this is rate limiting. Rate limiting is a technique that limits the number of requests a client can make to a server over a given period. This technique can prevent abuse, improve performance, and reduce costs. One npm package that helps implement rate limiting for serverless applications is @upstash/ratelimit, built on top of Upstash Redis.\r\n\r\nUpstash is a managed Redis-compatible database service designed for serverless applications.\r\n\r\n`@upstash/ratelimit` is an npm package that provides serverless rate limiting using Upstash Redis. The package offers a simple API that can be used to limit the number of requests a client can make within a given time frame. The following algorithms are supported:\r\n\r\n- Fixed window\r\n- Sliding window\r\n- Leaky bucket\r\n\r\n\r\nUsing `@upstash/ratelimit` is straightforward. First, you need to install the package using npm:\r\n\r\n```bash\r\nnpm install @upstash/ratelimit @upstash/redis\r\n```\r\nThen, you can use it in your  application:\r\n\r\n```ts\r\nimport { Ratelimit } from \"@upstash/ratelimit\"\r\nimport { Redis } from \"@upstash/redis\"\r\n\r\nconst ratelimit = new Ratelimit({\r\n    redis: new Redis({\r\n        url: \"\",\r\n        token: \"\"\r\n    }),\r\n    limiter: Ratelimit.slidingWindow(10, \"10s\"),\r\n    analytics: true\r\n})\r\n\r\n\r\n// Check if the client has exceeded the rate limit\r\nconst { success } = await ratelimit.limit(\"identifier\")\r\n```\r\n\r\nIn the code above, we initialize Upstash with our Upstash Redis credentials and define our rate limiting rules. We then call the `limit` function, passing the identifier. The function returns a Promise that resolves with `success` and some other useful data.\r\n\r\n`@upstash/ratelimit` is a useful npm package for serverless rate limiting that simplifies the process of implementing rate limiting for serverless applications. The package is built on top of Upstash Redis, which provides a complete solution for serverless applications. With `@upstash/ratelimit`, serverless developers can easily implement rate limiting, which can help prevent abuse, improve performance, and reduce costs.",
    "code": "var Component=(()=>{var p=Object.create;var a=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var E=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var u=(s,e)=>()=>(e||s((e={exports:{}}).exports,e),e.exports),g=(s,e)=>{for(var n in e)a(s,n,{get:e[n],enumerable:!0})},t=(s,e,n,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of E(e))!y.call(s,i)&&i!==n&&a(s,i,{get:()=>e[i],enumerable:!(r=h(e,i))||r.enumerable});return s};var f=(s,e,n)=>(n=s!=null?p(m(s)):{},t(e||!s||!s.__esModule?a(n,\"default\",{value:s,enumerable:!0}):n,s)),F=s=>t(a({},\"__esModule\",{value:!0}),s);var o=u((R,c)=>{c.exports=_jsx_runtime});var w={};g(w,{default:()=>B,frontmatter:()=>v});var l=f(o()),v={title:\"@upstash/ratelimit\",description:\"Ratelimiting library for serverless and edge runtimes. Built on top of Upstash Redis.\",date:\"2022-06-06\",url:\"https://upstash.com/blog/upstash-ratelimit\",repository:\"upstash/ratelimit\",published:!0};function d(s){let e=Object.assign({p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",div:\"div\",pre:\"pre\",span:\"span\"},s.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.p,{children:\"In today's digital age, serverless computing has become increasingly popular due to its scalability and cost-efficiency. One of the challenges of serverless computing is to manage resources efficiently, and one critical aspect of this is rate limiting. Rate limiting is a technique that limits the number of requests a client can make to a server over a given period. This technique can prevent abuse, improve performance, and reduce costs. One npm package that helps implement rate limiting for serverless applications is @upstash/ratelimit, built on top of Upstash Redis.\"}),`\n`,(0,l.jsx)(e.p,{children:\"Upstash is a managed Redis-compatible database service designed for serverless applications.\"}),`\n`,(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.code,{children:\"@upstash/ratelimit\"}),\" is an npm package that provides serverless rate limiting using Upstash Redis. The package offers a simple API that can be used to limit the number of requests a client can make within a given time frame. The following algorithms are supported:\"]}),`\n`,(0,l.jsxs)(e.ul,{children:[`\n`,(0,l.jsx)(e.li,{children:\"Fixed window\"}),`\n`,(0,l.jsx)(e.li,{children:\"Sliding window\"}),`\n`,(0,l.jsx)(e.li,{children:\"Leaky bucket\"}),`\n`]}),`\n`,(0,l.jsxs)(e.p,{children:[\"Using \",(0,l.jsx)(e.code,{children:\"@upstash/ratelimit\"}),\" is straightforward. First, you need to install the package using npm:\"]}),`\n`,(0,l.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,l.jsx)(e.pre,{\"data-language\":\"bash\",\"data-theme\":\"default\",children:(0,l.jsx)(e.code,{\"data-language\":\"bash\",\"data-theme\":\"default\",children:(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#B392F0\"},children:\"npm\"}),(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\" \"}),(0,l.jsx)(e.span,{style:{color:\"#9ECBFF\"},children:\"install\"}),(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\" \"}),(0,l.jsx)(e.span,{style:{color:\"#9ECBFF\"},children:\"@upstash/ratelimit\"}),(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\" \"}),(0,l.jsx)(e.span,{style:{color:\"#9ECBFF\"},children:\"@upstash/redis\"})]})})})}),`\n`,(0,l.jsx)(e.p,{children:\"Then, you can use it in your  application:\"}),`\n`,(0,l.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,l.jsx)(e.pre,{\"data-language\":\"ts\",\"data-theme\":\"default\",children:(0,l.jsxs)(e.code,{\"data-language\":\"ts\",\"data-theme\":\"default\",children:[(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#F97583\"},children:\"import\"}),(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\" { Ratelimit } \"}),(0,l.jsx)(e.span,{style:{color:\"#F97583\"},children:\"from\"}),(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\" \"}),(0,l.jsx)(e.span,{style:{color:\"#9ECBFF\"},children:'\"@upstash/ratelimit\"'})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#F97583\"},children:\"import\"}),(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\" { Redis } \"}),(0,l.jsx)(e.span,{style:{color:\"#F97583\"},children:\"from\"}),(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\" \"}),(0,l.jsx)(e.span,{style:{color:\"#9ECBFF\"},children:'\"@upstash/redis\"'})]}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:\" \"}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#F97583\"},children:\"const\"}),(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\" \"}),(0,l.jsx)(e.span,{style:{color:\"#79B8FF\"},children:\"ratelimit\"}),(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\" \"}),(0,l.jsx)(e.span,{style:{color:\"#F97583\"},children:\"=\"}),(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\" \"}),(0,l.jsx)(e.span,{style:{color:\"#F97583\"},children:\"new\"}),(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\" \"}),(0,l.jsx)(e.span,{style:{color:\"#B392F0\"},children:\"Ratelimit\"}),(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\"({\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\"    redis: \"}),(0,l.jsx)(e.span,{style:{color:\"#F97583\"},children:\"new\"}),(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\" \"}),(0,l.jsx)(e.span,{style:{color:\"#B392F0\"},children:\"Redis\"}),(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\"({\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\"        url: \"}),(0,l.jsx)(e.span,{style:{color:\"#9ECBFF\"},children:'\"\"'}),(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\",\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\"        token: \"}),(0,l.jsx)(e.span,{style:{color:\"#9ECBFF\"},children:'\"\"'})]}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\"    }),\"})}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\"    limiter: Ratelimit.\"}),(0,l.jsx)(e.span,{style:{color:\"#B392F0\"},children:\"slidingWindow\"}),(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\"(\"}),(0,l.jsx)(e.span,{style:{color:\"#79B8FF\"},children:\"10\"}),(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\", \"}),(0,l.jsx)(e.span,{style:{color:\"#9ECBFF\"},children:'\"10s\"'}),(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\"),\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\"    analytics: \"}),(0,l.jsx)(e.span,{style:{color:\"#79B8FF\"},children:\"true\"})]}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\"})\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:\" \"}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:\" \"}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#6A737D\"},children:\"// Check if the client has exceeded the rate limit\"})}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#F97583\"},children:\"const\"}),(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\" { \"}),(0,l.jsx)(e.span,{style:{color:\"#79B8FF\"},children:\"success\"}),(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\" } \"}),(0,l.jsx)(e.span,{style:{color:\"#F97583\"},children:\"=\"}),(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\" \"}),(0,l.jsx)(e.span,{style:{color:\"#F97583\"},children:\"await\"}),(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\" ratelimit.\"}),(0,l.jsx)(e.span,{style:{color:\"#B392F0\"},children:\"limit\"}),(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\"(\"}),(0,l.jsx)(e.span,{style:{color:\"#9ECBFF\"},children:'\"identifier\"'}),(0,l.jsx)(e.span,{style:{color:\"#E1E4E8\"},children:\")\"})]})]})})}),`\n`,(0,l.jsxs)(e.p,{children:[\"In the code above, we initialize Upstash with our Upstash Redis credentials and define our rate limiting rules. We then call the \",(0,l.jsx)(e.code,{children:\"limit\"}),\" function, passing the identifier. The function returns a Promise that resolves with \",(0,l.jsx)(e.code,{children:\"success\"}),\" and some other useful data.\"]}),`\n`,(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.code,{children:\"@upstash/ratelimit\"}),\" is a useful npm package for serverless rate limiting that simplifies the process of implementing rate limiting for serverless applications. The package is built on top of Upstash Redis, which provides a complete solution for serverless applications. With \",(0,l.jsx)(e.code,{children:\"@upstash/ratelimit\"}),\", serverless developers can easily implement rate limiting, which can help prevent abuse, improve performance, and reduce costs.\"]})]})}function b(s={}){let{wrapper:e}=s.components||{};return e?(0,l.jsx)(e,Object.assign({},s,{children:(0,l.jsx)(d,s)})):d(s)}var B=b;return F(w);})();\n;return Component;"
  },
  "_id": "projects/upstash-ratelimit.mdx",
  "_raw": {
    "sourceFilePath": "projects/upstash-ratelimit.mdx",
    "sourceFileName": "upstash-ratelimit.mdx",
    "sourceFileDir": "projects",
    "contentType": "mdx",
    "flattenedPath": "projects/upstash-ratelimit"
  },
  "type": "Project",
  "path": "/projects/upstash-ratelimit",
  "slug": "upstash-ratelimit"
}